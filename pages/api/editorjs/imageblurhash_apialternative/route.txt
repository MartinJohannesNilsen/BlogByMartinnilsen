import { getBlurhash } from "@/data/middleware/imageBlurhash/actions";
import { validateAuthAPIToken, validateImagestoreAPIToken } from "@/lib/tokenValidationAPI";
import { NextRequest } from "next/server";

export const dynamic = "force-dynamic";

function isImgUrl(url) {
	return fetch(url, { method: "HEAD" }).then((res) => {
		return res.headers.get("Content-Type")!.startsWith("image");
	});
}

/**
 * @swagger
 * /api/editorjs/imageblurhash:
 *   get:
 *     summary: Generate blurhash
 *     description: Generate blurhash and return encoded string, in addition to height and width of the image.
 *     tags:
 *       - EditorJS
 *     parameters:
 *       - in: query
 *         name: url
 *         required: true
 *         schema:
 *           type: string
 *         description: The URL to encode using the blurhash algorithm.
 *     responses:
 *       '200':
 *         description: Successful response.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 encoded:
 *                   type: string
 *                   example: "UCBnNqOEACxGNgn%Sday1GwcbHNt}YbIr]W;"
 *                 width:
 *                   type: integer
 *                   example: 1200
 *                 height:
 *                   type: integer
 *                   example: 700
 *
 *       '400':
 *         description: Bad request. URL parameter is missing or invalid.
 *       '500':
 *         description: Internal server error.
 *       '501':
 *         description: Method not supported.
 */
export async function GET(request: NextRequest) {
	// Validate authorized access based on header field 'apikey'
	const authValidation = await validateAuthAPIToken(request);
	const imagestoreValidation = await validateImagestoreAPIToken(request);
	if (!authValidation.isValid && !imagestoreValidation.isValid) {
		return Response.json({ code: authValidation.code, reason: authValidation.reason }, { status: authValidation.code });
	}

	// Get query parameters
	const url = request.nextUrl.searchParams.get("url");
	if (!url) {
		return Response.json({ code: 400, reason: "Missing url" }, { status: 400 });
	}

	try {
		// Check that url links to image
		let isImage = await isImgUrl(url as string);
		if (isImage) {
			// Get blurhash
			await getBlurhash(url as string).then((output) => {
				return Response.json(output, { status: 200 });
			});
		} else {
			return Response.json({ code: 400, reason: "Invalid url, ensure that url links to an image!" }, { status: 400 });
		}
	} catch (err) {
		console.log(err);
		return Response.json({ code: 500, reason: err }, { status: 500 });
	}
}
