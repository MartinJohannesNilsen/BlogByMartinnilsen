// Image upload/delete with optional compression support
import { cloudStorage } from "@/lib/firebaseConfig";
import {
  deleteObject,
  getDownloadURL,
  ref,
  uploadBytes,
} from "firebase/storage";
import {
  isSupportedFormat,
  compressImage,
} from "@/data/middleware/media/imageCompression/actions";

// Helper functions and list of supported types
const generateName = (extension: string) => {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const hour = String(date.getHours()).padStart(2, "0");
  const minute = String(date.getMinutes()).padStart(2, "0");
  const second = String(date.getSeconds()).padStart(2, "0");
  return `${year}-${month}-${day}.${hour}${minute}${second}.${extension}`;
};

const supportedMimeTypes = {
  jpg: "image/jpeg",
  jpeg: "image/jpeg",
  png: "image/png",
  gif: "image/gif",
  bmp: "image/bmp",
  webp: "image/webp",
  tiff: "image/tiff",
  svg: "image/svg+xml",
  mp4: "video/mp4",
  webm: "video/webm",
  mpeg: "video/mpeg",
  avi: "video/avi",
  mov: "video/quicktime",
  wmv: "video/x-ms-wmv",
  flv: "video/x-flv",
  mkv: "video/x-matroska",
};

export async function uploadImage(
  file: File,
  postId?: string,
  name?: string | null,
  compress: boolean = false,
  quality: number = 80,
  outputFormat: string = "auto"
) {
  // Get extension from file name
  const extensionMatch = file.name.match(/\.([0-9a-z]+)(?:[\?#]|$)/i);
  const extension = extensionMatch && extensionMatch[1].toLowerCase();
  if (!extension) return { code: 400, reason: "File missing extension!" };

  // Check for file support
  const mimeType = supportedMimeTypes[extension];
  if (!mimeType) {
    return {
      code: 400,
      reason: `File with extension '.${extension}' not supported!`,
    };
  }

  try {
    let fileToUpload: ArrayBuffer | Uint8Array;
    let fileExtension = extension;
    let fileType = file.type;
    let fileSize = file.size;

    // Handle compression if requested and format is supported
    if (compress && isSupportedFormat(extension)) {
      try {
        // Convert File to Buffer for compression
        const fileBuffer = Buffer.from(await file.arrayBuffer());

        // Verify the buffer is valid
        if (!fileBuffer || fileBuffer.length === 0) {
          console.warn("Empty file buffer, skipping compression");
          fileToUpload = await file.arrayBuffer();
        } else {
          // Apply compression - don't pass our filename to compressImage
          // Just get the compressed buffer and format
          const compressionResult = await compressImage(
            fileBuffer,
            file.name,
            quality,
            outputFormat,
            null // Don't use custom filename from compression
          );

          // Check if compression was successful
          if (compressionResult.code === 200 && compressionResult.data) {
            // Ensure the buffer is converted to the right type for uploadBytes
            fileToUpload = new Uint8Array(compressionResult.data.buffer);
            fileExtension = compressionResult.data.format;
            fileType = compressionResult.data.contentType;
            fileSize = compressionResult.data.compressedSize;
          } else {
            // Compression failed, fall back to original file
            fileToUpload = await file.arrayBuffer();
            console.warn(
              "Image compression skipped:",
              compressionResult.reason
            );
          }
        }
      } catch (compressionError) {
        console.error("Image compression error:", compressionError);
        // Fallback to original file on error
        fileToUpload = await file.arrayBuffer();
      }
    } else {
      // No compression requested or format not supported for compression
      fileToUpload = await file.arrayBuffer();
    }

    // Rename file, timestamp as default if not given new name
    const fileRef =
      `images/${postId}${postId && "/"}` +
      (name ? `${name}.${fileExtension}` : generateName(fileExtension));

    // Upload to Firestore
    const cloudStorageFileRef = ref(cloudStorage, fileRef);
    const metadata = {
      contentType: fileType,
    };

    const uploadTask = await uploadBytes(
      cloudStorageFileRef,
      fileToUpload,
      metadata
    );
    const downloadURL = await getDownloadURL(uploadTask.ref);

    return {
      code: 200,
      data: {
        url: downloadURL,
        fileRef: fileRef,
      },
      file: { size: fileSize, name: file.name, type: fileType },
    };
  } catch (error) {
    return { code: 500, reason: error.message };
  }
}

export async function deleteImage(fileRef: string) {
  try {
    const db_fileRef = ref(cloudStorage, fileRef);
    await deleteObject(db_fileRef);
    return { code: 200, response: "File successfully deleted!" };
  } catch (error) {
    return { code: 500, reason: error.message };
  }
}
